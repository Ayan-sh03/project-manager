{
  "openapi": "3.0.0",
  "info": {
    "title": "RBAC Backend API",
    "version": "1.0.0",
    "description": "API documentation for the RBAC backend system."
  },
  "servers": [
    {
      "url": "http://localhost:5000",
      "description": "Local server"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully."
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Login user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful."
          },
          "400": {
            "description": "Invalid credentials."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "summary": "Get user profile",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get all users (Admin only)",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/projects": {
      "post": {
        "summary": "Create a new project",
        "tags": ["Projects"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully."
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "get": {
        "summary": "Get all projects",
        "tags": ["Projects"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "summary": "Get a single project by ID",
        "tags": ["Projects"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": { "description": "Project retrieved successfully" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Project not found" }
        }
      },
      "put": {
        "summary": "Update a project by ID",
        "tags": ["Projects"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateProject" }
            }
          }
        },
        "responses": {
          "200": { "description": "Project updated successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Project not found" }
        }
      },
      "delete": {
        "summary": "Delete a project by ID",
        "tags": ["Projects"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": { "description": "Project deleted successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Project not found" }
        }
      }
    },
    "/api/projects/{projectId}/tasks": {
      "post": {
        "summary": "Create a new task within a project",
        "tags": ["Tasks"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTask" }
            }
          }
        },
        "responses": {
          "201": { "description": "Task created successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" }
        }
      },
      "get": {
        "summary": "Get all tasks within a project",
        "tags": ["Tasks"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": { "description": "Tasks retrieved successfully" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/api/projects/{projectId}/tasks/{taskId}": {
      "get": {
        "summary": "Get a single task by ID within a project",
        "tags": ["Tasks"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": { "description": "Task retrieved successfully" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Task not found" }
        }
      },
      "put": {
        "summary": "Update a task by ID within a project",
        "tags": ["Tasks"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateTask" }
            }
          }
        },
        "responses": {
          "200": { "description": "Task updated successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Task not found" }
        }
      },
      "delete": {
        "summary": "Delete a task by ID within a project",
        "tags": ["Tasks"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": { "description": "Task deleted successfully" },
          "401": { "description": "Unauthorized" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Task not found" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterRequest": {
        "type": "object",
        "required": ["username", "email", "password", "role"],
        "properties": {
          "username": {
            "type": "string",
            "example": "john_doe"
          },
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "StrongPassword123!"
          },
          "role": {
            "type": "string",
            "example": "User"
          }
        }
      },
      "CreateProject": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": { "type": "string", "example": "New Project" },
          "description": { "type": "string", "example": "Project description." }
        }
      },
      "UpdateProject": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Updated Project Name" },
          "description": { "type": "string", "example": "Updated description." }
        }
      },
      "CreateTask": {
        "type": "object",
        "required": ["title", "assigned_to"],
        "properties": {
          "title": { "type": "string", "example": "Design Database Schema" },
          "description": {
            "type": "string",
            "example": "Design the initial database schema for the project."
          },
          "assigned_to": { "type": "integer", "example": 2 },
          "status": { "type": "string", "example": "To Do" }
        }
      },
      "UpdateTask": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "example": "Update Database Schema" },
          "description": {
            "type": "string",
            "example": "Update the schema based on new requirements."
          },
          "assigned_to": { "type": "integer", "example": 3 },
          "status": { "type": "string", "example": "In Progress" }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "StrongPassword123!"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
